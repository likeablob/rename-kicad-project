name: CI

on: [push, pull_request]

jobs:

  code-style:
    runs-on: ubuntu-latest

    name: Check coding standards

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install poetry
        shell: bash
        run: |
          python -m pip install poetry
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install

      - name: Check code formatting
        run: poetry run poe style:check

      - name: Run linter
        run: poetry run poe lint

      - name: Check types
        run: poetry run poe types

  run-tests:
    runs-on: ${{ matrix.os }}-latest

    name: Run tests

    strategy:
      matrix:
        os: [ubuntu, macos, windows]
        python-version: ['3.7','3.8','3.9','3.10']

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install poetry
        shell: bash
        run: |
          python -m pip install poetry
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: poetry run poe test --cov-report=xml --cov-report term-missing | tee pytest-coverage.txt

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu' && matrix.python-version == '3.7'
        uses: codecov/codecov-action@v2
        with:
          env_vars: RUNNER_OS
          files: ./coverage.xml
          fail_ci_if_error: true

      - name: Comment coverage
        if: matrix.os == 'ubuntu' && matrix.python-version == '3.7'
        uses: coroo/pytest-coverage-commentator@v1.0.2

  build-release:
    runs-on: ubuntu-latest
    needs:
      - code-style
      - run-tests

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install poetry
        shell: bash
        run: |
          python -m pip install poetry
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Build package
        run: poetry build

      - name: Publish package to PyPI
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
        run: poetry publish -n
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.pypi }}

      - name: Archive build products
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/
